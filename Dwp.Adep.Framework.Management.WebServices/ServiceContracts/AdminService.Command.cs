//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using AutoMapper;
using Dwp.Adep.Framework.Management.WebServices.DataContracts;
using Dwp.Adep.Framework.Management.WebServices.Exceptions;
using Dwp.Adep.Framework.Management.DataServices;
using Dwp.Adep.Framework.Management.DataServices.Models;
using Dwp.Adep.Framework.Management.WebServices.ServiceContracts;

namespace Dwp.Adep.Framework.Management.WebServices.ServiceContracts
{
    public partial class AdminService
    {
        #region CRUD Behaviour for Command
    
            #region Create
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public void CreateCommand(string userName, string currentUserName, string appID, string overrideID, CommandDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                CreateCommand(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void CreateCommand(string userName, string currentUserName, string appID, string overrideID, CommandDC dc, IRepository<Command> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Command destination = Mapper.Map<CommandDC, Command>(dc);
    
                        dataRepository.Add(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region GetCommand
    
    		/// <summary>
        	/// 
        	/// </summary>
        	/// <param name="userName"></param>
        	/// <param name="currentUserName"></param>
        	/// <param name="appID"></param>
        	/// <param name="overrideID"></param>
        	/// <param name="code"></param>
        	/// <returns></returns>
            public CommandVMDC GetCommand(string userName, string currentUserName, string appID, string overrideID, string code)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                IRepository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
    			// Create repositories for lookup data
    
    			// Get Command
                return GetCommand(userName, currentUserName, appID, overrideID, code, uow, dataRepository
    			);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public CommandVMDC GetCommand(string userName, string currentUserName, string appID, string overrideID, string code, IUnitOfWork uow, IRepository<Command> dataRepository
    			)
    		
            {
                try
                {
                    using (uow)
                    {
    					// Convert code to Guid
                        Guid codeGuid = Guid.Parse(code);
    
    					// Retrieve specific Command
                        Command dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
    					// Convert to data contract for passing through service interface
                        CommandDC destination = Mapper.Map<Command, CommandDC>(dataEntity);
    
    
    
        				// Create aggregate contract
                        CommandVMDC message = new CommandVMDC();
    
                        message.CommandItem = destination;
                        
    					return message;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <returns></returns>
            public List<CommandDC> GetAllCommand(string userName, string currentUserName, string appID, string overrideID, bool includeInActive)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                return GetAllCommand(userName, currentUserName, appID, overrideID, includeInActive, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public List<CommandDC> GetAllCommand(string userName, string currentUserName, string appID, string overrideID,  bool includeInActive, IRepository<Command> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
    					// Build specification
    					ISpecification<Command> specification = null;
    					if (!includeInActive) specification = new Specification<Command>(x => x.IsActive == true);
    
                        // Find all items that satisfy the specification created above.
                        IEnumerable<Command> dataEntities = dataRepository.Find(specification, x => new { x.Code });
    					
    					// Convert to data contracts
                        List<CommandDC> destinations = Mapper.Map<IEnumerable<Command>, List<CommandDC>>(dataEntities);
    
                        return destinations;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
            /// <returns></returns>
    		public CommandSearchMatchResultsDC SearchCommand(string userName, string currentUserName, string appID, string overrideID, CommandSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive)
            {
    		    IUnitOfWork uow = new UnitOfWork();
    
                IRepository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                return SearchCommand(userName, currentUserName, appID, overrideID, searchCriteria, page, pageSize, includeInActive, dataRepository, uow);
    		}
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
    		public CommandSearchMatchResultsDC SearchCommand(string userName, string currentUserName, string appID, string overrideID, CommandSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive, IRepository<Command> dataRepository, IUnitOfWork uow)
            {
    		    try
                {
                    using (uow)
                    {
    					// Build specification for search
    					ISpecification<Command> specification = null;
    					if (!includeInActive) specification = new Specification<Command>(x => x.IsActive == true);
    
    				    // Find all items that satisfy the specification created above.
                        IEnumerable<Command> dataEntities = dataRepository.Find(specification, x => new { x.Code /*change field*/}, page, pageSize);
    					
    					// Get total count of items for search critera
    					int itemCount = dataRepository.Find(specification).Count();
    
    					CommandSearchMatchResultsDC results = new CommandSearchMatchResultsDC();
    
    					// Convert to data contracts
                        List<CommandSearchMatchDC> destinations = Mapper.Map<IEnumerable<Command>, List<CommandSearchMatchDC>>(dataEntities);
    
    					results.CommandList = destinations;
    
                        return results;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
    		}
    
            #endregion
    
            #region Update
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public void UpdateCommand(string userName, string currentUserName, string appID, string overrideID, CommandDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                UpdateCommand(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void UpdateCommand(string userName, string currentUserName, string appID, string overrideID, CommandDC dc, IRepository<Command> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Command destination = Mapper.Map<CommandDC, Command>(dc);
    
                        dataRepository.Update(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region Delete
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            public void DeleteCommand(string userName, string currentUserName, string appID, string overrideID, string code, string lockID)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<Command> dataRepository = new Repository<Command>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                DeleteCommand(userName, currentUserName, appID, overrideID, code, lockID, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void DeleteCommand(string userName, string currentUserName, string appID, string overrideID, string code, string lockID, IRepository<Command> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Guid codeGuid = Guid.Parse(code);
    
                        Command dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
                        dataRepository.Delete(dataEntity);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion

        #endregion
    }
}
