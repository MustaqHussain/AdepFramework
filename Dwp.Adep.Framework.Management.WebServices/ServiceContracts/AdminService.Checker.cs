//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;
using System.ServiceModel;
using AutoMapper;
using Dwp.Adep.Framework.Management.WebServices.DataContracts;
using Dwp.Adep.Framework.Management.WebServices.Exceptions;
using Dwp.Adep.Framework.Management.DataServices;
using Dwp.Adep.Framework.Management.DataServices.Models;
using Dwp.Adep.Framework.Management.WebServices.ServiceContracts;

namespace Dwp.Adep.Framework.Management.WebServices.ServiceContracts
{
    public partial class AdminService
    {
        #region CRUD Behaviour for Checker
    
            #region Create
    
            public void CreateChecker(string userName, string currentUserName, string appID, string overrideID, CheckerDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<Checker> dataRepository = new Repository<Checker>(uow.ObjectContext);
    
                CreateChecker(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
            public void CreateChecker(string userName, string currentUserName, string appID, string overrideID, CheckerDC dc, IRepository<Checker> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Checker destination = Mapper.Map<CheckerDC, Checker>(dc);
    
                        dataRepository.Add(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region GetChecker
    
            public CheckerDC GetChecker(string userName, string currentUserName, string appID, string overrideID, string code)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<Checker> dataRepository = new Repository<Checker>(uow.ObjectContext);
    
                return GetChecker(userName, currentUserName, appID, overrideID, code, dataRepository, uow);
            }
    
            public CheckerDC GetChecker(string userName, string currentUserName, string appID, string overrideID, string code, IRepository<Checker> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Guid codeGuid = Guid.Parse(code);
    
                        Checker dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
                        CheckerDC destination = Mapper.Map<Checker, CheckerDC>(dataEntity);
    
                        return destination;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
            public List<CheckerDC> GetAllChecker(string userName, string currentUserName, string appID, string overrideID)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<Checker> dataRepository = new Repository<Checker>(uow.ObjectContext);
    
                return GetAllChecker(userName, currentUserName, appID, overrideID, dataRepository, uow);
            }
    
            public List<CheckerDC> GetAllChecker(string userName, string currentUserName, string appID, string overrideID, IRepository<Checker> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        IEnumerable<Checker> dataEntities = dataRepository.GetAll();
    
                        List<CheckerDC> destinations = Mapper.Map<IEnumerable<Checker>, List<CheckerDC>>(dataEntities);
    
                        return destinations;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
            #endregion
    
            #region Update
    
            public void UpdateChecker(string userName, string currentUserName, string appID, string overrideID, CheckerDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<Checker> dataRepository = new Repository<Checker>(uow.ObjectContext);
    
                UpdateChecker(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
            public void UpdateChecker(string userName, string currentUserName, string appID, string overrideID, CheckerDC dc, IRepository<Checker> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Checker destination = Mapper.Map<CheckerDC, Checker>(dc);
    
                        dataRepository.Update(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region Delete
    
            public void DeleteChecker(string userName, string currentUserName, string appID, string overrideID, string code, string lockID)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<Checker> dataRepository = new Repository<Checker>(uow.ObjectContext);
    
                DeleteChecker(userName, currentUserName, appID, overrideID, code, lockID, dataRepository, uow);
            }
    
            public void DeleteChecker(string userName, string currentUserName, string appID, string overrideID, string code, string lockID, IRepository<Checker> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Guid codeGuid = Guid.Parse(code);
    
                        Checker dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
                        dataRepository.Delete(dataEntity);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion

        #endregion
    }
}
