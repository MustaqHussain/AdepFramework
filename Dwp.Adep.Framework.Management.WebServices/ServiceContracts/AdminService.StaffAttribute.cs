//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using AutoMapper;
using Dwp.Adep.Framework.Management.WebServices.DataContracts;
using Dwp.Adep.Framework.Management.WebServices.Exceptions;
using Dwp.Adep.Framework.Management.DataServices;
using Dwp.Adep.Framework.Management.DataServices.Models;
using Dwp.Adep.Framework.Management.WebServices.ServiceContracts;

namespace Dwp.Adep.Framework.Management.WebServices.ServiceContracts
{
    public partial class AdminService
    {
        #region CRUD Behaviour for StaffAttribute
    
            #region Create
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public void CreateStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                CreateStaffAttribute(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void CreateStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeDC dc, IRepository<StaffAttribute> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        StaffAttribute destination = Mapper.Map<StaffAttributeDC, StaffAttribute>(dc);
    
                        dataRepository.Add(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region GetStaffAttribute
    
    		/// <summary>
        	/// 
        	/// </summary>
        	/// <param name="userName"></param>
        	/// <param name="currentUserName"></param>
        	/// <param name="appID"></param>
        	/// <param name="overrideID"></param>
        	/// <param name="code"></param>
        	/// <returns></returns>
            public StaffAttributeVMDC GetStaffAttribute(string userName, string currentUserName, string appID, string overrideID, string code)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                IRepository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
    			// Create repositories for lookup data
    			IRepository<Staff> staffRepository = new Repository<Staff>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    			IRepository<Application> applicationRepository = new Repository<Application>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    			IRepository<ApplicationAttribute> applicationAttributeRepository = new Repository<ApplicationAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
    			// Get StaffAttribute
                return GetStaffAttribute(userName, currentUserName, appID, overrideID, code, uow, dataRepository
    			, staffRepository
    			, applicationRepository
    			, applicationAttributeRepository
    			);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public StaffAttributeVMDC GetStaffAttribute(string userName, string currentUserName, string appID, string overrideID, string code, IUnitOfWork uow, IRepository<StaffAttribute> dataRepository
    			,IRepository<Staff> staffRepository
    			,IRepository<Application> applicationRepository
    			,IRepository<ApplicationAttribute> applicationAttributeRepository
    			)
    		
            {
                try
                {
                    using (uow)
                    {
    					// Convert code to Guid
                        Guid codeGuid = Guid.Parse(code);
    
    					// Retrieve specific StaffAttribute
                        StaffAttribute dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
    					// Convert to data contract for passing through service interface
                        StaffAttributeDC destination = Mapper.Map<StaffAttribute, StaffAttributeDC>(dataEntity);
    
    					IEnumerable<Staff> staffList = staffRepository.GetAll();
    					IEnumerable<Application> applicationList = applicationRepository.GetAll();
    					IEnumerable<ApplicationAttribute> applicationAttributeList = applicationAttributeRepository.GetAll();
    
    					List<StaffDC> staffDestinationList = Mapper.Map<List<StaffDC>>(staffList);
    					List<ApplicationDC> applicationDestinationList = Mapper.Map<List<ApplicationDC>>(applicationList);
    					List<ApplicationAttributeDC> applicationAttributeDestinationList = Mapper.Map<List<ApplicationAttributeDC>>(applicationAttributeList);
    
        				// Create aggregate contract
                        StaffAttributeVMDC message = new StaffAttributeVMDC();
    
                        message.StaffAttributeItem = destination;
    					message.StaffList = staffDestinationList;
    					message.ApplicationList = applicationDestinationList;
    					message.ApplicationAttributeList = applicationAttributeDestinationList;
                        
    					return message;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <returns></returns>
            public List<StaffAttributeDC> GetAllStaffAttribute(string userName, string currentUserName, string appID, string overrideID, bool includeInActive)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                Repository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                return GetAllStaffAttribute(userName, currentUserName, appID, overrideID, includeInActive, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public List<StaffAttributeDC> GetAllStaffAttribute(string userName, string currentUserName, string appID, string overrideID,  bool includeInActive, IRepository<StaffAttribute> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
    					// Build specification
    					ISpecification<StaffAttribute> specification = null;
    					if (!includeInActive) specification = new Specification<StaffAttribute>(x => x.IsActive == true);
    
                        // Find all items that satisfy the specification created above.
                        IEnumerable<StaffAttribute> dataEntities = dataRepository.Find(specification, x => new { x.Code });
    					
    					// Convert to data contracts
                        List<StaffAttributeDC> destinations = Mapper.Map<IEnumerable<StaffAttribute>, List<StaffAttributeDC>>(dataEntities);
    
                        return destinations;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
            /// <returns></returns>
    		public StaffAttributeSearchMatchResultsDC SearchStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive)
            {
    		    IUnitOfWork uow = new UnitOfWork();
    
                IRepository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                return SearchStaffAttribute(userName, currentUserName, appID, overrideID, searchCriteria, page, pageSize, includeInActive, dataRepository, uow);
    		}
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
    		public StaffAttributeSearchMatchResultsDC SearchStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive, IRepository<StaffAttribute> dataRepository, IUnitOfWork uow)
            {
    		    try
                {
                    using (uow)
                    {
    					// Build specification for search
    					ISpecification<StaffAttribute> specification = null;
    					if (!includeInActive) specification = new Specification<StaffAttribute>(x => x.IsActive == true);
    
    				    // Find all items that satisfy the specification created above.
                        IEnumerable<StaffAttribute> dataEntities = dataRepository.Find(specification, x => new { x.Code /*change field*/}, page, pageSize);
    					
    					// Get total count of items for search critera
    					int itemCount = dataRepository.Find(specification).Count();
    
    					StaffAttributeSearchMatchResultsDC results = new StaffAttributeSearchMatchResultsDC();
    
    					// Convert to data contracts
                        List<StaffAttributeSearchMatchDC> destinations = Mapper.Map<IEnumerable<StaffAttribute>, List<StaffAttributeSearchMatchDC>>(dataEntities);
    
    					results.StaffAttributeList = destinations;
    
                        return results;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
    		}
    
            #endregion
    
            #region Update
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public void UpdateStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeDC dc)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                UpdateStaffAttribute(userName, currentUserName, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void UpdateStaffAttribute(string userName, string currentUserName, string appID, string overrideID, StaffAttributeDC dc, IRepository<StaffAttribute> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        StaffAttribute destination = Mapper.Map<StaffAttributeDC, StaffAttribute>(dc);
    
                        dataRepository.Update(destination);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion
    
            #region Delete
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            public void DeleteStaffAttribute(string userName, string currentUserName, string appID, string overrideID, string code, string lockID)
            {
                IUnitOfWork uow = new UnitOfWork();
    
                IRepository<StaffAttribute> dataRepository = new Repository<StaffAttribute>(uow.ObjectContext, userName, currentUserName, appID, overrideID);
    
                DeleteStaffAttribute(userName, currentUserName, appID, overrideID, code, lockID, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="userName"></param>
            /// <param name="currentUserName"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void DeleteStaffAttribute(string userName, string currentUserName, string appID, string overrideID, string code, string lockID, IRepository<StaffAttribute> dataRepository, IUnitOfWork uow)
            {
                try
                {
                    using (uow)
                    {
                        Guid codeGuid = Guid.Parse(code);
    
                        StaffAttribute dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
                        dataRepository.Delete(dataEntity);
    
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion

        #endregion
    }
}
