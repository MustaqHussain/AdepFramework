//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using AutoMapper;
using Dwp.Adep.Framework.Management.WebServices.DataContracts;
using Dwp.Adep.Framework.Management.WebServices.Exceptions;
using Dwp.Adep.Framework.Management.DataServices;
using Dwp.Adep.Framework.Management.DataServices.Models;
using Dwp.Adep.Framework.Management.WebServices.ServiceContracts;

namespace Dwp.Adep.Framework.Management.WebServices.ServiceContracts
{
    /// <summary>
    /// Admin service
    /// Class containing service behaviour for SecurityCheck
    /// </summary>
    public partial class AdminService
    {
        #region Behaviour for SecurityCheck
    
            #region Create
    
    		/// <summary>
            /// Create a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public SecurityCheckVMDC CreateSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckDC dc)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    	
    			// Create repository
                Repository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    
    			// Call overload with injected objects
                return CreateSecurityCheck(currentUser, user, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            ///  Create a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public SecurityCheckVMDC CreateSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckDC dc, IRepository<SecurityCheck> dataRepository, IUnitOfWork uow)
            {
                try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (null == dc) throw new ArgumentOutOfRangeException("dc");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    					// Create a new ID for the SecurityCheck item
    					dc.Code = Guid.NewGuid();
    					
    					// Map data contract to model
                        SecurityCheck destination = Mapper.Map<SecurityCheckDC, SecurityCheck>(dc);
    
    					// Add the new item
                        dataRepository.Add(destination);
    
    					// Commit unit of work
                        uow.Commit();
                    }
    				
    				// Create aggregate data contract
    				SecurityCheckVMDC returnObject = new SecurityCheckVMDC();
    				
    				// Add new item to aggregate
    				returnObject.SecurityCheckItem = dc;
    				
    				return returnObject;
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    				
    				return null;
                }
            }
    
            #endregion
    
            #region GetSecurityCheck
    
    		/// <summary>
        	/// Retrieve a SecurityCheck with associated lookups
        	/// </summary>
        	/// <param name="currentUser"></param>
        	/// <param name="user"></param>
        	/// <param name="appID"></param>
        	/// <param name="overrideID"></param>
        	/// <param name="code"></param>
        	/// <returns></returns>
            public SecurityCheckVMDC GetSecurityCheck(string currentUser, string user, string appID, string overrideID, string code)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                IRepository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    
    			// Create repositories for lookup data
    			IRepository<Staff> checkerRepository = new Repository<Staff>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Customer> customerRepository = new Repository<Customer>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Country> liaisonCountryRepository = new Repository<Country>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<ReasonForDelay> reasonForDelayRepository = new Repository<ReasonForDelay>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<BCSNumber> bSCNumberRepository = new Repository<BCSNumber>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Server> serverRepository = new Repository<Server>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Staff> staffRepository = new Repository<Staff>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Organisation> teamRepository = new Repository<Organisation>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Organisation> commandRepository = new Repository<Organisation>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			IRepository<Organisation> locationRepository = new Repository<Organisation>(uow.ObjectContext, currentUser, user, appID, overrideID);
    
    			// Call overload with injected objects
                return GetSecurityCheck(currentUser, user, appID, overrideID, code, uow, dataRepository
    			, checkerRepository
    			, customerRepository
    			, liaisonCountryRepository
    			, reasonForDelayRepository
    			, bSCNumberRepository
    			, serverRepository
    			, staffRepository
    			, teamRepository
    			, commandRepository
    			, locationRepository
    			);
            }
    
    		/// <summary>
            /// Retrieve a SecurityCheck with associated lookups
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public SecurityCheckVMDC GetSecurityCheck(string currentUser, string user, string appID, string overrideID, string code, IUnitOfWork uow, IRepository<SecurityCheck> dataRepository
    			,IRepository<Staff> checkerRepository
    			,IRepository<Customer> customerRepository
    			,IRepository<Country> liaisonCountryRepository
    			,IRepository<ReasonForDelay> reasonForDelayRepository
    			,IRepository<BCSNumber> bSCNumberRepository
    			,IRepository<Server> serverRepository
    			,IRepository<Staff> staffRepository
    			,IRepository<Organisation> teamRepository
    			,IRepository<Organisation> commandRepository
    			,IRepository<Organisation> locationRepository
    			)
    		
            {
                try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    				
    					SecurityCheckDC destination = null;
    					
    					// If code is null then just return supporting lists
    					if (!string.IsNullOrEmpty(code))
    					{
    						// Convert code to Guid
    	                    Guid codeGuid = Guid.Parse(code);
    
    						// Retrieve specific SecurityCheck
    	                    SecurityCheck dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    
    						// Convert to data contract for passing through service interface
    	                    destination = Mapper.Map<SecurityCheck, SecurityCheckDC>(dataEntity);
    					}
    
    					IEnumerable<Staff> checkerList = checkerRepository.GetAll(x => new {x.StaffNumber});
    					IEnumerable<Customer> customerList = customerRepository.GetAll(x => new {x.DateRaised});
    					IEnumerable<Country> liaisonCountryList = liaisonCountryRepository.GetAll(x => new {x.Description});
    					IEnumerable<ReasonForDelay> reasonForDelayList = reasonForDelayRepository.GetAll(x => new {x.Description});
    					IEnumerable<BCSNumber> bSCNumberList = bSCNumberRepository.GetAll(x => new {x.Description});
    					IEnumerable<Server> serverList = serverRepository.GetAll(x => new {x.Number});
    					IEnumerable<Staff> staffList = staffRepository.GetAll(x => new {x.StaffNumber});
    					IEnumerable<Organisation> teamList = teamRepository.GetAll(x => new {x.Name});
    					IEnumerable<Organisation> commandList = commandRepository.GetAll(x => new {x.Name});
    					IEnumerable<Organisation> locationList = locationRepository.GetAll(x => new {x.Name});
    
    					List<StaffDC> checkerDestinationList = Mapper.Map<List<StaffDC>>(checkerList);
    					List<CustomerDC> customerDestinationList = Mapper.Map<List<CustomerDC>>(customerList);
    					List<CountryDC> liaisonCountryDestinationList = Mapper.Map<List<CountryDC>>(liaisonCountryList);
    					List<ReasonForDelayDC> reasonForDelayDestinationList = Mapper.Map<List<ReasonForDelayDC>>(reasonForDelayList);
    					List<BCSNumberDC> bSCNumberDestinationList = Mapper.Map<List<BCSNumberDC>>(bSCNumberList);
    					List<ServerDC> serverDestinationList = Mapper.Map<List<ServerDC>>(serverList);
    					List<StaffDC> staffDestinationList = Mapper.Map<List<StaffDC>>(staffList);
    					List<OrganisationDC> teamDestinationList = Mapper.Map<List<OrganisationDC>>(teamList);
    					List<OrganisationDC> commandDestinationList = Mapper.Map<List<OrganisationDC>>(commandList);
    					List<OrganisationDC> locationDestinationList = Mapper.Map<List<OrganisationDC>>(locationList);
    
        				// Create aggregate contract
                        SecurityCheckVMDC returnObject = new SecurityCheckVMDC();
    
                        returnObject.SecurityCheckItem = destination;
    					returnObject.CheckerList = checkerDestinationList;
    					returnObject.CustomerList = customerDestinationList;
    					returnObject.LiaisonCountryList = liaisonCountryDestinationList;
    					returnObject.ReasonForDelayList = reasonForDelayDestinationList;
    					returnObject.BSCNumberList = bSCNumberDestinationList;
    					returnObject.ServerList = serverDestinationList;
    					returnObject.StaffList = staffDestinationList;
    					returnObject.TeamList = teamDestinationList;
    					returnObject.CommandList = commandDestinationList;
    					returnObject.LocationList = locationDestinationList;
                        
    					return returnObject;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
    		/// <param name="includeInActive"></param>
            /// <returns></returns>
            public List<SecurityCheckDC> GetAllSecurityCheck(string currentUser, string user, string appID, string overrideID, bool includeInActive)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                Repository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			
    			// Create specification for filtering
    			ISpecification<SecurityCheck> specification = new Specification<SecurityCheck>();
    
    			// Call overload with injected objects
                return GetAllSecurityCheck(currentUser, user, appID, overrideID, includeInActive, specification, dataRepository, uow);
            }
    
    		/// <summary>
            /// 
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
    		/// <param name="includeInActive"></param>
    		/// <param name="specification"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
            public List<SecurityCheckDC> GetAllSecurityCheck(string currentUser, string user, string appID, string overrideID,  bool includeInActive, ISpecification<SecurityCheck> specification, IRepository<SecurityCheck> dataRepository, IUnitOfWork uow)
            {
                try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == specification) throw new ArgumentOutOfRangeException("specification");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    					// Build specification
                        if (!includeInActive)
                        {
                            ISpecification<SecurityCheck> isActiveSpecification = new Specification<SecurityCheck>(x => x.IsActive == true);
                            specification = specification.And(isActiveSpecification);
                        }
    
    					// Set default sort expression
    					System.Linq.Expressions.Expression<Func<SecurityCheck, Object>> sortExpression = x => x.CheckID;
    					
                        // Find all items that satisfy the specification created above.
                        IEnumerable<SecurityCheck> dataEntities = dataRepository.Find(specification, sortExpression);
    					
    					// Convert to data contracts
                        List<SecurityCheckDC> destinations = Mapper.Map<IEnumerable<SecurityCheck>, List<SecurityCheckDC>>(dataEntities);
    
                        return destinations;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
            }
    		
    		#endregion
    		
    		#region Search
    
    		/// <summary>
            /// Search for SecurityCheck items
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
            /// <returns></returns>
    		public SecurityCheckSearchVMDC SearchSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive)
            {
    			// Create unit of work
    		    IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                IRepository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    			
    			// Create specification for filtering
    			ISpecification<SecurityCheck> specification = new Specification<SecurityCheck>();
    
    			// Call overload with injected objects
                return SearchSecurityCheck(currentUser, user, appID, overrideID, searchCriteria, page, pageSize, includeInActive, specification, dataRepository, uow);
    		}
    
    		/// <summary>
            /// Search for SecurityCheck items
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="searchCriteria"></param>
            /// <param name="page"></param>
            /// <param name="pageSize"></param>
            /// <param name="includeInActive"></param>
    		/// <param name="specification"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            /// <returns></returns>
    		public SecurityCheckSearchVMDC SearchSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckSearchCriteriaDC searchCriteria, int page, int pageSize, bool includeInActive,
    		ISpecification<SecurityCheck> specification, IRepository<SecurityCheck> dataRepository, IUnitOfWork uow)
            {
    		    try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == specification) throw new ArgumentOutOfRangeException("specification");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    					// Evaluate search criteria if supplied
                        if (null != searchCriteria)
                        {
                            EvaluateSecurityCheckSearchCriteria(searchCriteria, ref specification);
                        }
    
                        if (!includeInActive)
                        {
                            ISpecification<SecurityCheck> isActiveSpecification = new Specification<SecurityCheck>(x => x.IsActive == true);
                            specification = specification.And(isActiveSpecification);
                        }
    
    					// Set default sort expression
    					System.Linq.Expressions.Expression<Func<SecurityCheck, Object>> sortExpression = x => x.CheckID;
    					
    				    // Find all items that satisfy the specification created above.
                        IEnumerable<SecurityCheck> dataEntities = dataRepository.Find(specification, sortExpression, page, pageSize);
    					
    					// Get total count of items for search critera
    					int itemCount = dataRepository.Find(specification).Count();
    
    					SecurityCheckSearchVMDC results = new SecurityCheckSearchVMDC();
    
    					// Convert to data contracts
                        List<SecurityCheckSearchMatchDC> destinations = Mapper.Map<IEnumerable<SecurityCheck>, List<SecurityCheckSearchMatchDC>>(dataEntities);
    
    					results.MatchList = destinations;
    					results.SearchCriteria = searchCriteria;
    					results.RecordCount = itemCount;
    
                        return results;
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    
                    return null;
                }
    		}
    		
    		// Partial method for evaluation of SecurityCheck search criteria
            partial void EvaluateSecurityCheckSearchCriteria(SecurityCheckSearchCriteriaDC searchCriteria, ref ISpecification<SecurityCheck> specification);
            #endregion
    
            #region Update
    
    		/// <summary>
            /// Update a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            public SecurityCheckVMDC UpdateSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckDC dc)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    			
    			// Create repository
                IRepository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    
    			// Call overload with injected objects
                return UpdateSecurityCheck(currentUser, user, appID, overrideID, dc, dataRepository, uow);
            }
    
    		/// <summary>
            /// Update a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="dc"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public SecurityCheckVMDC UpdateSecurityCheck(string currentUser, string user, string appID, string overrideID, SecurityCheckDC dc, IRepository<SecurityCheck> dataRepository, IUnitOfWork uow)
            {
                try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (null == dc) throw new ArgumentOutOfRangeException("dc");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    					// Map data contract to model
                        SecurityCheck destination = Mapper.Map<SecurityCheckDC, SecurityCheck>(dc);
    
    					// Add the new item
                        dataRepository.Update(destination);
    
    					// Commit unit of work
                        uow.Commit();
                    }
    				
    				// Create new data contract to return
    				SecurityCheckVMDC returnObject = new SecurityCheckVMDC();
    				
    				// Add new item to datacontract
    				returnObject.SecurityCheckItem = dc;
    				
    				// Commit unit of work
    				return returnObject;
    				
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
    				
    				return null;
                }
            }
    
            #endregion
    
            #region Delete
    
    		/// <summary>
            /// Delete a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            public void DeleteSecurityCheck(string currentUser, string user, string appID, string overrideID, string code, string lockID)
            {
    			// Create unit of work
                IUnitOfWork uow = new UnitOfWork();
    
    			// Create repository
                IRepository<SecurityCheck> dataRepository = new Repository<SecurityCheck>(uow.ObjectContext, currentUser, user, appID, overrideID);
    
    			// Call overload with injected objects
                DeleteSecurityCheck(currentUser, user, appID, overrideID, code, lockID, dataRepository, uow);
            }
    
    		/// <summary>
            /// Update a SecurityCheck
            /// </summary>
            /// <param name="currentUser"></param>
            /// <param name="user"></param>
            /// <param name="appID"></param>
            /// <param name="overrideID"></param>
            /// <param name="code"></param>
            /// <param name="lockID"></param>
            /// <param name="dataRepository"></param>
            /// <param name="uow"></param>
            public void DeleteSecurityCheck(string currentUser, string user, string appID, string overrideID, string code, string lockID, IRepository<SecurityCheck> dataRepository, IUnitOfWork uow)
            {
                try
                {
    				#region Parameter validation
    
    				// Validate parameters
    				if (string.IsNullOrEmpty(currentUser)) throw new ArgumentOutOfRangeException("currentUser");
    				if (string.IsNullOrEmpty(user)) throw new ArgumentOutOfRangeException("user");
    				if (string.IsNullOrEmpty(appID)) throw new ArgumentOutOfRangeException("appID");
    				if (string.IsNullOrEmpty(code)) throw new ArgumentOutOfRangeException("code");
    				if (string.IsNullOrEmpty(lockID)) throw new ArgumentOutOfRangeException("lockID");
    				if (null == dataRepository) throw new ArgumentOutOfRangeException("dataRepository");
    				if (null == uow) throw new ArgumentOutOfRangeException("uow");
    
    				#endregion
    
                    using (uow)
                    {
    					// Convert string to guid
                        Guid codeGuid = Guid.Parse(code);	
    					
    					// Find item based on ID
                        SecurityCheck dataEntity = dataRepository.Single(x => x.Code == codeGuid);
    					
    					// Delete the item
                        dataRepository.Delete(dataEntity);
    
    					// Commit unit of work
                        uow.Commit();
                    }
                }
                catch (Exception e)
                {
                    //Prevent exception from propogating across the service interface
                    ExceptionManager.ShieldException(e);
                }
            }
    
            #endregion

        #endregion
    }
}
