//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Web.Mvc;
using System.ComponentModel.DataAnnotations;
using Dwp.Adep.Framework.Management.ResourceLibrary;
using AutoMapper;
using Dwp.Adep.Framework.Management.Web.Helpers;
using Dwp.Adep.Framework.Management.Web.ViewModels;
using Dwp.Adep.Framework.Management.Web.Models;
using Dwp.Adep.Framework.Management.Web.AdminService;


namespace SecurityMonitoringMvc.Controllers
{
    public class StaffAttributeController : BaseController
    {
        #region Edit

        // GET: /StaffAttribute/Edit?code=
        public ActionResult Edit(string code)
        {
            StaffAttributeVM model = new StaffAttributeVM();
            //Not from staff or error
            if (String.IsNullOrEmpty(code))
            {
                //If session has lists then use them
                RepopulateListsFromCacheSession(model);

                //Assume we are in create mode as no code passed
                model.StaffAttributeItem = new StaffAttributeModel();                              
            }
            //if we have been passed a code then assume we are in edit situation and we need to retreive from the database.
            else
            {
                try
                {
                    AdminServiceClient sc = new AdminServiceClient();
                    StaffAttributeVMDC returnedObject = null;//sc.GetSecurityCheckAndLookUps(SessionManager.UserID, SessionManager.UserID, "SecurityMonitoring", "", false, code);

                    //Get view model from database
                    model = ConvertStaffAttributeDC(returnedObject);

                    ResolveFieldCodesToFieldNamesUsingLists(model);

                    //Store the DB version of the check.
                    //SessionManager.StaffAttributeDBVersion = model.StaffAttributeItem;
                }
                catch (Exception e)
                {
                    SetAccessContext(model);
                    model.Message = Resources.MESSAGE_RETREIVAL_FAILED;
                    return View(model);
                }
            }

            //Adds current retreived StaffAttribute to session
            //SessionManager.CurrentStaffAttribute = model.StaffAttributeItem;
            //SetAccessContext(model);
            
            return View(model);
        }       

        // POST: /StaffAttribute/Edit with Create button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult CreateStaffAttribute(string code, FormCollection collection)
        {
            return UpdateStaffAttribute();
        }
        // POST: /StaffAttribute/Edit with Save button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult SaveStaffAttribute(string code, FormCollection collection)
        {
            return UpdateStaffAttribute();
        }

        //This method is shared between create and save
        private ActionResult UpdateStaffAttribute()
        {
            var model = GetUpdatedModel();

            var errors = ModelState
                    .Where(x => x.Value.Errors.Count > 0)
                    .Select(x => new { x.Key, x.Value.Errors[0].ErrorMessage })
                    .ToArray();
            //Set flags false
            SetFlagsFalse(model);
            if (ModelState.IsValid)
            {
                //Attempt update
                try
                {
                    AdminServiceClient sc = new AdminServiceClient();
                    StaffAttributeDC StaffAttributeToCreate = Mapper.Map<StaffAttributeDC>(model.StaffAttributeItem);
                    StaffAttributeVMDC returnedObject = null;//sc.SaveStaffAttribute(SessionManager.UserID, SessionManager.UserID, "SecurityMonitoring", "", StaffAttributeToCreate);
                    var createdStaffAttribute = returnedObject.StaffAttributeItem;

                    model.StaffAttributeItem = Mapper.Map<StaffAttributeModel>(createdStaffAttribute);

                    //After creation some of the fields are display only so we need the resolved look up nmames
                    ResolveFieldCodesToFieldNamesUsingLists(model);

                    //model.AccessContext = StaffAttributeAccessContext.Edit;

                    //SessionManager.StaffAttributeDBVersion = model.StaffAttributeItem;
                    //SessionManager.CurrentStaffAttribute = model.StaffAttributeItem;
                    
                    // Remove the state from the model as these are being populated by the controller and the HTML helpers are being populated with
					// the POSTED values and not the changed ones.
                    ModelState.Clear();
                    model.Message = Resources.MESSAGE_UPDATE_SUCCEEDED;
                }
                catch (Exception e)
                {
                    model.Message = Resources.MESSAGE_UPDATE_FAILED;
                    return View(model);
                }
            }

            return View(model);
        }

        

        // POST: /StaffAttribute/Edit with Exit button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult ExitStaffAttribute(string code, FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsExitConfirmed == "True")
            {
                //Set flags false
                SetFlagsFalse(model);

                model.IsExitConfirmed = "False";
                
                //remove the current values from session
                //SessionManager.CurrentStaffAttribute = null;
                //SessionManager.StaffAttributeDBVersion = null;

                return RedirectToAction("Home", "Home");
                
            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = "Are you sure you wish to exit? Press exit again to confirm.";
                model.IsExitConfirmed = "True";
            }
            
            return View(model);
        }

        // POST: /StaffAttribute/Edit with Delete button submitting
        [HttpParamEdit(Prefix = "Edit::")]
        [HttpPost]
        public ActionResult DeleteStaffAttribute(string code, FormCollection collection)
        {
            var model = GetUpdatedModel();
            if (model.IsDeleteConfirmed == "True")
            {
                //Set flags false
                SetFlagsFalse(model);
            
                model.IsDeleteConfirmed = "False";
                try
                {
                    AdminServiceClient sc = new AdminServiceClient();
                    sc.DeleteStaffAttribute(SessionManager.UserID, SessionManager.UserID, "SecurityMonitoring", "", model.StaffAttributeItem.Code.ToString(), model.StaffAttributeItem.RowIdentifier.ToString());

                    //remove the current values from session
                    //SessionManager.CurrentStaffAttribute = null;
                    //SessionManager.StaffAttributeDBVersion = null;

                    return RedirectToAction("Home","Home");
                }
                catch
                {
                    model.Message = Resources.MESSAGE_UPDATE_FAILED;
                    return View(model);
                }
            }
            else
            {
                //Set flags false
                SetFlagsFalse(model);
                model.Message = "Are you sure you wish to delete? Press delete again to confirm.";
                model.IsDeleteConfirmed = "True";
            }
            
            return View(model);
        }

        // POST: /SecurityCheck/EditCheck with NewCheck button submitting
        [HttpParamEditCheck(Prefix = "EditCheck::")]
        [HttpPost]
        public ActionResult NewCheck(string code, FormCollection collection)
        {
            var model = GetUpdatedModel();
            //Set flags false
            SetFlagsFalse(model);
            
            //Clear Down Session
            //SessionManager.CurrentStaffAttribute = null;
            //SessionManager.StaffAttributeDBVersion = null;
            
            //Go to the Edit Screen
            return RedirectToAction("Edit", "StaffAttribute");
        }

        private void SetFlagsFalse(StaffAttributeVM model)
        {
            model.IsDeleteConfirmed = "False";
            model.IsExitConfirmed = "False";
            model.IsNewConfirmed = "False";

            //Stop the binder resetting the posted values
            ModelState.Remove("IsDeleteConfirmed");
            ModelState.Remove("IsExitConfirmed");
            ModelState.Remove("IsNewConfirmed");
        }

        private void SetAccessContext(StaffAttributeVM model)
        {
            //Decide on access context
            if (model.StaffAttributeItem.Code == Guid.Empty)
            {
                //model.AccessContext = AccessContext.Create;
            }
            else
            {
                //model.AccessContext = AccessContext.Edit;
            }
        }

        private void ResolveFieldCodesToFieldNamesUsingLists(StaffAttributeVM model)
        {
            var ListCache = CacheManager.ListCache;
			//TODO:
        }

        /// <summary>
        /// Private method to merge in the model 
        /// </summary>
        /// <returns></returns>
        private StaffAttributeVM GetUpdatedModel()
        {
            StaffAttributeVM model = new StaffAttributeVM();
            RepopulateListsFromCacheSession(model);
            model.Message = "";

            //if (SessionManager.CurrentStaffAttribute != null)
            //{
            //    model.StaffAttributeItem = SessionManager.CurrentStaffAttribute;
            //}

            //***************************************NEED WHITE LIST ---- BLACK LIST ------ TO PREVENT OVERPOSTING **************************
            bool result = TryUpdateModel(model);//This also validates and sets ModelState
            //*******************************************************************************************************************************
            //if (SessionManager.CurrentStaffAttribute != null)
            //{
                //*****************************************PREVENT OVER POSTING ATTACKS******************************************************
                //Get the values for read only fields from session
            //    MergeNewValuesWithOriginal(model.StaffAttributeItem);
                //***************************************************************************************************************************
            //}

            //SetAccessContext(model);

            //Set the context of the check based on check number
            //SetCheckContext(model);

            return model;
        }

        #region private methods for create

        private StaffAttributeVM ConvertStaffAttributeDC(StaffAttributeVMDC returnedObject)
        {
            StaffAttributeVM model = new StaffAttributeVM();

            model.StaffAttributeItem = Mapper.Map<StaffAttributeDC, StaffAttributeModel>(returnedObject.StaffAttributeItem);
            
            RepopulateListsFromCacheSession(model);

            return model;
        }

        private void AddListsToSession(StaffAttributeVMDC returnedObject)
        {

            //*********************************
            //*PLACE HOLDER FOR SESSION LISTS * 
            //*********************************

        }
        private void RepopulateListsFromCacheSession(StaffAttributeVM model)
        {
            //*********************************
            //*PLACE HOLDER FOR SESSION LISTS * 
            //*********************************


            //*********************************
            //*     POPULATE CACHED LISTS     *
            //*********************************
        }

        private void MergeNewValuesWithOriginal(StaffAttributeModel modelFromView)
        {
            //***************************The values that are display only will not be posted back so need to get them from session**************************

            //StaffAttributeModel OriginalValuesFromSession = SessionManager.CurrentStaffAttribute;

        }
        #endregion

        #endregion
       
    }
}
