<#/*
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@ 
 output extension=".cshtml"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\..\Dwp.Adep.Framework.Management.DataServices\Models\Model1.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
//string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{	
	string outputDir = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), entity.Name);

	if(!Directory.Exists(outputDir))
	{
		Directory.CreateDirectory(outputDir);
	}
	string fileName = "Index";
	fileManager.StartNewFile(outputDir + @"\" + fileName + ".cshtml");
#>
@model IEnumerable<Dwp.Adep.Framework.Management.Web.Models.<#=entity.Name#>Model>

@{
    ViewBag.Title = "<#=entity.Name#>View";
}

<h2><#=entity.Name#>View</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
<#
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
	{
		bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
		bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);
#>
      <th>
<#	if (edmProperty.Name.ToLower() != "code" && edmProperty.Name.ToLower() != "rowidentifier")
	{
#>
           <#=edmProperty.Name#>
<#	}
#>
        </th>
  <#}#>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
<#
	foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
	{
		bool isForeignKey = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
		bool isDefaultValueDefinedInModel = (edmProperty.DefaultValue != null);
#>
      <td>
<#	if (edmProperty.Name.ToLower() != "code" && edmProperty.Name.ToLower() != "rowidentifier")
	{
#>
            @Html.DisplayFor(modelItem => item.<#=edmProperty.Name#>)
<#	}
	else
	{
#>
			@Html.HiddenFor(modelItem => item.<#=edmProperty.Name#>)
<#
	}
#>
        </td>
  <#}#>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Code }) |
            @Html.ActionLink("Details", "Details", new { id=item.Code }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Code })
        </td>
    </tr>
}

</table>
<#
}
fileManager.Process();
*/#>


